CREATE OR REPLACE TABLE DIM_DATE (
  DATE_KEY INT NOT NULL PRIMARY KEY,
  FULL_DATE DATE NOT NULL,
  YEAR SMALLINT NOT NULL,
  QUARTER SMALLINT NOT NULL,
  MONTH SMALLINT NOT NULL,
  MONTH_NAME VARCHAR NOT NULL,
  DAY_OF_MONTH SMALLINT NOT NULL,
  DAY_OF_WEEK SMALLINT NOT NULL,
  DAY_NAME VARCHAR NOT NULL,
  WEEK_OF_YEAR SMALLINT NOT NULL,
  FISCAL_YEAR SMALLINT NOT NULL,
  FISCAL_QUARTER SMALLINT NOT NULL,
  FISCAL_MONTH SMALLINT NOT NULL,
  FISCAL_WEEK SMALLINT NOT NULL,
  WEEKEND_FLAG BOOLEAN NOT NULL,
  LEAP_YEAR_FLAG BOOLEAN NOT NULL
);

-- POPULATE THE TABLE WITH DATES FROM 2020 TO 2025
INSERT INTO DIM_DATE
-- USE A GENERATOR FUNCTION TO CREATE A SEQUENCE OF NUMBERS FROM 0 TO 2189
WITH SEQ AS (
  SELECT SEQ4() AS N
  FROM TABLE(GENERATOR(ROWCOUNT => 2190))
)
-- USE A SELECT QUERY TO CONVERT THE NUMBERS TO DATES AND DATE ATTRIBUTES
SELECT
  -- USE TO_VARCHAR AND CAST FUNCTIONS TO CREATE A DATE KEY IN YYYYMMDD FORMAT
  CAST(TO_VARCHAR(DATEADD('DAY', N, '2020-01-01'), 'YYYYMMDD') AS INT) AS DATE_KEY,
  -- USE DATEADD FUNCTION TO CREATE A DATE VALUE BY ADDING N DAYS TO THE START DATE
  DATEADD('DAY', N, '2020-01-01') AS FULL_DATE,
  -- USE DATE_PART FUNCTION TO EXTRACT THE YEAR, QUARTER, MONTH, DAY OF MONTH, DAY OF WEEK, AND WEEK OF YEAR FROM THE DATE VALUE
  DATE_PART('YEAR', DATEADD('DAY', N, '2020-01-01')) AS YEAR,
  DATE_PART('QUARTER', DATEADD('DAY', N, '2020-01-01')) AS QUARTER,
  DATE_PART('MONTH', DATEADD('DAY', N, '2020-01-01')) AS MONTH,
  -- USE TO_VARCHAR FUNCTION TO FORMAT THE MONTH NAME AND DAY NAME FROM THE DATE VALUE
  TO_VARCHAR(DATEADD('DAY', N, '2020-01-01'), 'MON') AS MONTH_NAME,
  DATE_PART('DAY', DATEADD('DAY', N, '2020-01-01')) AS DAY_OF_MONTH,
  DATE_PART('DOW', DATEADD('DAY', N, '2020-01-01')) AS DAY_OF_WEEK,
  TO_VARCHAR(DATEADD('DAY', N, '2020-01-01'), 'DAY') AS DAY_NAME,
  DATE_PART('WEEK', DATEADD('DAY', N, '2020-01-01')) AS WEEK_OF_YEAR,
  
-- ADDED LOGIC TO CALCULATE THE FISCAL YEAR, FISCAL QUARTER, FISCAL MONTH, AND FISCAL WEEK BASED ON A CUSTOM FISCAL CALENDAR THAT STARTS ON JULY 1ST OF EACH YEAR
-- USE CASE EXPRESSION TO ASSIGN THE FISCAL YEAR BASED ON THE CALENDAR YEAR AND MONTH
CASE 
    WHEN MONTH(DATEADD('DAY', N, '2020-01-01')) >= 7 THEN YEAR(DATEADD('DAY', N, '2020-01-01'))
    ELSE YEAR(DATEADD('DAY', N, '2020-01-01')) -1 
END AS FISCAL_YEAR,

-- USE CASE EXPRESSION TO ASSIGN THE FISCAL QUARTER BASED ON THE CALENDAR QUARTER AND MONTH
CASE 
    WHEN QUARTER(DATEADD('DAY', N, '2020-01-01')) = 1 AND MONTH(DATEADD('DAY', N, '2020-01-01')) <= 6 THEN QUARTER(DATEADD('DAY', N, '2020-01-01')) +2 
    WHEN QUARTER(DATEADD('DAY', N, '2020-01-01')) = 2 AND MONTH(DATEADD('DAY', N, '2020-01-01')) <= 6 THEN QUARTER(DATEADD('DAY', N, '2020-01-01')) +2 
    WHEN QUARTER(DATEADD('DAY', N, '2020-01-01')) = 3 AND MONTH(DATEADD('DAY', N, '2020-01-01')) >= 7 THEN QUARTER(DATEADD('DAY', N, '2020-01-01')) -2 
    ELSE QUARTER(DATEADD('DAY', N, '2020-01-01')) -2 
END AS FISCAL_QUARTER,

-- USE CASE EXPRESSION TO ASSIGN THE FISCAL MONTH BASED ON THE CALENDAR MONTH
CASE 
    WHEN MONTH(DATEADD('DAY', N, '2020-01-01')) = 1 THEN 7
    WHEN MONTH(DATEADD('DAY', N, '2020-01-01')) = 2 THEN 8
    WHEN MONTH(DATEADD('DAY', N, '2020-01-01')) = 3 THEN 9
    WHEN MONTH(DATEADD('DAY', N, '2020-01-01')) = 4 THEN 10
    WHEN MONTH(DATEADD('DAY', N, '2020-01-01')) = 5 THEN 11
    WHEN MONTH(DATEADD('DAY', N, '2020-01-01')) = 6 THEN 12
    ELSE MONTH(DATEADD('DAY', N, '2020-01-01')) -6
END AS FISCAL_MONTH,

-- USE DATE_PART FUNCTION TO EXTRACT THE FISCAL WEEK BASED ON THE FISCAL YEAR AND WEEK OF YEAR
DATE_PART('WEEK', DATEADD('YEAR', -FISCAL_YEAR, DATEADD('WEEK', WEEK_OF_YEAR, TO_DATE(FISCAL_YEAR || '-07-01')))) AS FISCAL_WEEK,

-- USE CASE EXPRESSION TO FLAG THE WEEKENDS BASED ON THE DAY OF WEEK VALUE
CASE 
    WHEN DATE_PART('DOW', (DATEADD('DAY', N, '2020-01-01'))) IN (1,7) THEN TRUE -- SUNDAY AND SATURDAY ARE WEEKENDS
    ELSE FALSE -- OTHER DAYS ARE NOT WEEKENDS
END AS WEEKEND_FLAG,

-- USE IS_LEAP_YEAR FUNCTION TO FLAG THE LEAP YEARS BASED ON THE YEAR VALUE
CASE
    WHEN MOD(YEAR(DATEADD('DAY', N, '2020-01-01')), 4) = 0 THEN TRUE
    ELSE FALSE
END AS LEAP_YEAR_FLAG

FROM SEQ;
